package com.talktrip.talktrip.global.redis;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.talktrip.talktrip.domain.chat.dto.response.ChatMessageDto;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.listener.ChannelTopic;
import org.springframework.stereotype.Component;

@RequiredArgsConstructor
@Component
@Log4j2

public class RedisPublisher {
    private final StringRedisTemplate redis;
    private final RedisTemplate<String, Object> redisTemplate;
    private final ObjectMapper objectMapper;
    private final RedisPublisherWithRetry publisherWithRetry; // ‚Üê Ïó¨Í∏∞ÏÑú ÏÇ¨Ïö©

    public void publish(String channel, Object payload) {
        try {
            String message = objectMapper.writeValueAsString(payload);
            redis.convertAndSend(channel, message);
            log.info("[RedisPublisher] RedisÎ°ú Î©îÏãúÏßÄ Î∞úÌñâ (Channel: {}, Message: {})", channel, message);
        } catch (Exception e) {
            log.error("[RedisPublisher] Redis Î©îÏãúÏßÄ Î∞úÌñâ Ï§ë Ïò§Î•ò Î∞úÏÉù: {}", e.getMessage(), e);
        }
    }

    public void publishAfterCommit(ChannelTopic topic, Object dto) {
        runAfterCommit(() -> doPublish(topic, dto)); // Ïª§Î∞ã ÌõÑ Î∞úÌñâ (Ïû¨ÏãúÎèÑ X)
    }

    public void publishWithRetry(ChannelTopic topic, Object dto) {
        // Ïû¨ÏãúÎèÑ ÌïÑÏöîÌïòÏßÄÎßå Ìä∏ÎûúÏû≠ÏÖò Î∞ñ: Ï¶âÏãú Ïû¨ÏãúÎèÑ Î∞úÌñâ
        publisherWithRetry.publishWithRetry(topic, dto);
    }

    public void publishAfterCommitWithRetry(ChannelTopic topic, Object dto) {
        // Ïª§Î∞ã Î≥¥Ïû• + ÏùºÏãú Ïò§Î•ò Ïû¨ÏãúÎèÑ
        runAfterCommit(() -> publisherWithRetry.publishWithRetry(topic, dto));
    }

    public void publishToRoom(String roomId, ChatMessageDto dto) {
        try {
            String channel = "chat:room:" + roomId; // ‚úÖ Î∞©Î≥Ñ Ï±ÑÎÑê
            redis.convertAndSend(channel, objectMapper.writeValueAsString(dto));
        } catch (Exception e) {
            throw new RuntimeException("Redis publish failed", e);
        }
    }


    private void doPublish(ChannelTopic topic, Object dto) {
        try {
            String json = objectMapper.writeValueAsString(dto);
            log.info("üöÄ RedisÏóê Î∞úÌñâÌï† JSON: {}", json);
            redisTemplate.convertAndSend(topic.getTopic(), json);
        } catch (com.fasterxml.jackson.core.JsonProcessingException e) {
            throw new RuntimeException("Î©îÏãúÏßÄ ÏßÅÎ†¨Ìôî Ïã§Ìå®", e);
        }
    }

    private void runAfterCommit(Runnable task) {
        if (org.springframework.transaction.support.TransactionSynchronizationManager.isActualTransactionActive()) {
            org.springframework.transaction.support.TransactionSynchronizationManager.registerSynchronization(
                    new org.springframework.transaction.support.TransactionSynchronization() {
                        @Override public void afterCommit() { task.run(); }
                    }
            );
        } else {
            task.run();
        }
    }
}
