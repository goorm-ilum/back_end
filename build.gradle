plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.talktrip'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly { extendsFrom annotationProcessor }

    mockitoAgent {
        transitive = false
        visible = false
    }
}

repositories {
    mavenCentral()
}

ext {
    querydslVersion = "5.1.0"
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'com.mysql:mysql-connector-j'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // JWT, Swagger
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-config'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // queryDSL 설정
    implementation "com.querydsl:querydsl-jpa:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

    // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // S3 설정
    implementation 'software.amazon.awssdk:s3:2.20.0'

    // 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'
    testImplementation "org.mockito:mockito-core:5.12.0"
    mockitoAgent "org.mockito:mockito-agent:5.12.0"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


    // web socket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // toss payment
    implementation 'com.googlecode.json-simple:json-simple:1.1'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

// 테스트 실행 후, like/review/product의 controller/service/repository만 커버리지 리포트 생성
tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoDomainCoverage'
}

tasks.register('jacocoDomainCoverage', JacocoReport) {
    dependsOn test

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    // 포함/제외 패턴
    def includePatterns = [
            // product
            'com/talktrip/talktrip/domain/product/controller/**',
            'com/talktrip/talktrip/domain/product/service/**',
            'com/talktrip/talktrip/domain/product/repository/**',
            // like
            'com/talktrip/talktrip/domain/like/controller/**',
            'com/talktrip/talktrip/domain/like/service/**',
            'com/talktrip/talktrip/domain/like/repository/**',
            // review
            'com/talktrip/talktrip/domain/review/controller/**',
            'com/talktrip/talktrip/domain/review/service/**',
            'com/talktrip/talktrip/domain/review/repository/**'
    ]

    def excludePatterns = [
            '**/Q*.class',  // QueryDSL 생성 클래스 제외
            'com/talktrip/talktrip/**/entity/**',
            'com/talktrip/talktrip/**/dto/**',
            'com/talktrip/talktrip/**/enums/**',
            'com/talktrip/talktrip/**/exception/**'
    ]

    // 클래스/소스/실행데이터 지정
    def mainOutput = files(sourceSets.main.output)

    classDirectories.setFrom(
            mainOutput.asFileTree.matching {
                include includePatterns
                exclude excludePatterns
            }
    )

    sourceDirectories.setFrom files(sourceSets.main.allSource.srcDirs)

    executionData.setFrom fileTree(dir: buildDir, includes: [
            'jacoco/test.exec',
            'jacoco/*.exec',
            'outputs/unit_test_code_coverage/*/*.exec' // 환경에 따라 생성 경로 보정
    ])
}
